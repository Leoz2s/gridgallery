* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  -webkit-font-smoothing: antialiased; /* webkit é para chrome safari */
  -moz-osx-font-smoothing: grayscale; /* osx é do mac - moz é da mozilla - para firefox */
  /* -webkit-box-sizing: border-box; */ /* vendor prefix, que é usado quando o navegador não aceita a propriedade 
  ou quando não é aceita por todos os navegadores, a ideia é que algum dia, 
  todos os navegadores aceitem a propriedade e poderemos usar apenas o font-smoothing: ; por exemplo */
}

:root {
  font-size: 62.5%;
  
  --hue: 240;
  --color-base-white: hsl(0, 0%, 100%);
  --color-base-gray-100: hsl(0, 0%, 96%);
  --color-base-gray-300: hsl(var(--hue), 60%, 58%);
  --color-base-gray-500: hsl(0, 0%, 24%);
  --color-base-gray-900: hsl(var(--hue), 60%, 30%);
}

html, body, input {
  font-family: 'Mulish', sans-serif;
}

a {
  text-decoration: none;
}

body {
  font-size: 1.6rem;

  background-color: var(--color-base-white);
  color: var(--color-base-gray-900);
}

#app {
  display: grid;
  grid-template-rows: max-content 1fr max-content;

  height: 100vh;
}

.container {
  padding: 1.6rem 3.2rem;
  width: min(112rem, 100%); /* Limita a largura até 1120px e permite qualquer valor abaixo, que seja 100% da tela - e o max? */
  margin: 0 auto;
}

main {
  overflow-y: scroll; /* O scrolling só será aplicado ao conteúdo do main, fazendo com que outroes elementos fiquem fixos na tela */

  background-color: var(--color-base-gray-100);
}

header, nav, nav ul {
  display: flex;
  align-items: center;
  gap: 7.2rem;

  font-weight: 700;
}

header form {
  flex: 1;
}

nav ul {
  list-style: none;
  font-size: 1.8rem;
  color: var(--color-base-gray-300);
}

ul li.actice a {
  color: var(--color-base-gray-900);
}

ul li a{
  color: var(--color-base-gray-300);
}

ul li a:hover {
  color: var(--color-base-gray-900);
}

.input-wrapper label {
  width: 1px;
  height: 1px;
  overflow: hidden;
  position: absolute;
}

.input-wrapper input {
  width: 100%;
  padding: 1.6rem;

  background-color: var(--color-base-gray-100);
  border: 0;
  border-radius: .6rem;

  font-size: 1.6rem;
  font-weight: 600;
}

.input-wrapper input::placeholder {
  color: var(--color-base-gray-500);

  opacity: 0.56;
}

.avatar {
  width: 4.2rem;
  height: 4.2rem;

  object-fit: cover;

  border-radius: 50%;
}

/* galeria */
main h1 {
  font-size: 2.4rem;
  padding-top: 1.6rem; /* somado com o padding do container */
}

.gallery {
  margin-top: 3.2rem;

  display: grid;
  grid-template-columns: repeat(3, 1fr);
  /* grid-template-rows: repeat(3, 1fr); */
  gap: 2.2rem;
}

.item {
  background-color: var(--color-base-white);
  border-radius: .8rem;
  overflow: hidden;

  /* display: flex; flex-direction: column; */ /* Forma de remover o gap entre a <img> e o <figcaption> do jeito errado*/
}

.item img {
  width: 100%; 
  /* 100% do espaço que ela tem, porque ela sempre extrapola */

  aspect-ratio: 16/9;
  object-fit: cover;

  /* transition-property: transform, filter, all;
  transition-duration: 1s;
  transition-delay: 0s;
  transition-timing-function: ease-out; */

  transition: all 200ms ease-out, filter 200ms ease-in, transform 600ms ease-out;

  display: block; /* Forma de remover o gap entre a imagem e o figcaption da forma correta */
}

.item img:hover {
  filter: hue-rotate(7deg) contrast(101%) saturate(200%);

  transform: scale(1.1) rotate(-2deg);
}

.details {
  padding: 2.2rem;

  background-color: var(--color-base-white);
  
  z-index: 1;
  position: relative;

  /* margin-top: -4px; */ /* border: 1px solid red; */
  /* Forma de remover o gap entre a <img> e o <figcaption> de forma diferente, borda para verificar o tamanho */
}

.details h2 {
  font-size: 1.8rem;
}

.tags {
  margin-top: 1.2rem;
}

.tags span {
  padding: .6rem;
  background-color: var(--color-base-gray-100);
  border-radius: .4rem;

  line-height: 0;
  font-size: 1.2rem;
  text-transform: uppercase;
}

footer {
  text-align: center;

  padding: 1.6rem;

  font-weight: 600;
}

/* Animations */
header {
  --startY: -100%;
  animation: move .4s ease-in-out;
}

footer {
  --startY: 100%;
  animation: move .4s ease-in-out;
}

@keyframes move {
  from {
    transform: translateY(var(--startY));
  }
}

.item {
  --delay: .4s;
  animation: appear .4s var(--delay) backwards;
}

@keyframes appear {
  0% {
    opacity: 0;
    transform: scale(0.7);
  }

  50% {
    transform: scale(1.2);
  }
}